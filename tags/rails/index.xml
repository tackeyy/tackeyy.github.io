<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on F.C. BigDecimal | 読んだ本のメモやWebまわりのはなし</title>
    <link>http://blog.tackeyy.org/tags/rails/</link>
    <description>Recent content in Rails on F.C. BigDecimal | 読んだ本のメモやWebまわりのはなし</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 01 Aug 2016 23:37:50 +0900</lastBuildDate>
    <atom:link href="http://blog.tackeyy.org/tags/rails/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rspecでテストを書くときの雛形</title>
      <link>http://blog.tackeyy.org/post/2016-08-01/rspec-template/</link>
      <pubDate>Mon, 01 Aug 2016 23:37:50 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016-08-01/rspec-template/</guid>
      <description>

&lt;p&gt;最近Rspecでテストを書くことが増えているのですが、特別な処理がない限りある程度テスト内容が大体同じなのでは？と思っています。&lt;br&gt;
処理がほぼ同じなのであれば、雛形があった方が実装が早いので、雛形をメモしておく次第です。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;携わっているプロジェクトのコードですが、以下の点より業務に影響がないと判断しています。&lt;br&gt;
* adminは大体どのプロジェクトでも存在している（かつ特殊な処理を書いてない）
* プロジェクトが特定される内容がない&lt;/p&gt;

&lt;h1 id=&#34;spec-controllers-rb:ea9c8302dac4598d2cb9137d1657275c&#34;&gt;spec/controllers/&lt;strong&gt;/&lt;/strong&gt;.rb&lt;/h1&gt;

&lt;h2 id=&#34;普通のspecテストの雛形:ea9c8302dac4598d2cb9137d1657275c&#34;&gt;普通のspecテストの雛形&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/12d39610347ec2538481a18ce28d5ae5.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;rspec-x-factorygirl:ea9c8302dac4598d2cb9137d1657275c&#34;&gt;Rspec x FactoryGirl&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/320927641ec26be11369aae90aeb4c74.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;spec-models-rb:ea9c8302dac4598d2cb9137d1657275c&#34;&gt;spec/models/*.rb&lt;/h1&gt;

&lt;h2 id=&#34;普通のspecテストの雛形-1:ea9c8302dac4598d2cb9137d1657275c&#34;&gt;普通のspecテストの雛形&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/8ce63b57638f2fc58f046e2b63a23f70.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;rspec-x-factorygirl-x-webmock:ea9c8302dac4598d2cb9137d1657275c&#34;&gt;Rspec x FactoryGirl x WebMock&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/05e71aadfa4cdbee157820c8553a2111.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>既存のディレクトリにrails newする</title>
      <link>http://blog.tackeyy.org/post/2016-07-26/create-rails-project-into-current-directry/</link>
      <pubDate>Tue, 26 Jul 2016 23:43:17 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016-07-26/create-rails-project-into-current-directry/</guid>
      <description>

&lt;p&gt;久しぶりに &lt;code&gt;rails new&lt;/code&gt; しようと思うといつも忘れるのでメモ。&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;コマンド:bbb14a0b07c3fe05c1b3ac6fc1faed5f&#34;&gt;コマンド&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;rails new .&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考:bbb14a0b07c3fe05c1b3ac6fc1faed5f&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ltcmdr927.hatenablog.jp/entry/2014/04/10/174333&#34;&gt;http://ltcmdr927.hatenablog.jp/entry/2014/04/10/174333&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;そもそもディレクトリを作ってからじゃなくて、 &lt;code&gt;git clone&lt;/code&gt; すれば良い話なんだけど。&lt;br&gt;
&lt;br&gt;
以上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>node-easymockでモックサーバーを立てる</title>
      <link>http://blog.tackeyy.org/post/2016-06-21/easymock/</link>
      <pubDate>Tue, 21 Jun 2016 17:23:04 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016-06-21/easymock/</guid>
      <description>

&lt;h4 id=&#34;node-easymock:d7ce3da87a14f82de3ea69a2bacb3ef4&#34;&gt;node-easymock&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cyberagent/node-easymock&#34;&gt;https://github.com/cyberagent/node-easymock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;APIの仕様は固まっているが実装中などというシチュエーションにおいて、&lt;br&gt;
サンプルデータをAPIの仕様にそって作成しておけば、APIが返すJSONを返してくれるモックサーバーが簡単に作るれるツールです。&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;モックサーバーを導入するモチベーション:d7ce3da87a14f82de3ea69a2bacb3ef4&#34;&gt;モックサーバーを導入するモチベーション&lt;/h4&gt;

&lt;p&gt;（自分が主導したわけではないのですが）&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;APIの実装はまだ時間がかかるが、&lt;br&gt;&lt;/li&gt;
&lt;li&gt;仕様はあらかた決まっているため、&lt;br&gt;&lt;/li&gt;
&lt;li&gt;APIに繋ぎこみを早く行いたい&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使い方:d7ce3da87a14f82de3ea69a2bacb3ef4&#34;&gt;使い方&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cyberagent/node-easymock#usage&#34;&gt;本家のREADME&lt;/a&gt;だけで簡単にインストールできたのですが、&lt;br&gt;
複数のデータをベタ書きではなく少しいい感じに作ろうとほんの少しだけ試行錯誤しました。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;lib/easymock/_templates/notice.json&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;noticeId&amp;quot;: &amp;quot;#{_1}&amp;quot;,
  &amp;quot;noticeTitle&amp;quot;: &amp;quot;通知#{_1}&amp;quot;,
  &amp;quot;noticeDetail&amp;quot;: &amp;quot;通知#{_1}の詳細&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lib/easymock/me/notice/1_get.json&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;notice&amp;quot;: [
    &amp;quot;{{notice(1)}}&amp;quot;,
    &amp;quot;{{notice(2)}}&amp;quot;,
    &amp;quot;{{notice(3)}}&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考にしたREADMEは&lt;a href=&#34;https://github.com/cyberagent/node-easymock#parameters&#34;&gt;ここらへん&lt;/a&gt;です。&lt;br&gt;
上記のデータだと引数が一つなので問題ないですが、例えばcategoryのように0: 学校, 1: 職場みたいなケースの場合、&lt;br&gt;
&lt;code&gt;&amp;quot;{{notice(1, 0)&amp;quot;}}&lt;/code&gt;のようにするとデータと見ただけでは何をしているのか分からなくなってしまいます。&lt;br&gt;
それを解決するために&lt;code&gt;config.json&lt;/code&gt;に変数を定義することができます。詳細は&lt;a href=&#34;https://github.com/cyberagent/node-easymock#configjson&#34;&gt;ここ&lt;/a&gt;に記載があります。&lt;br&gt;
なるほど、変数を定義して&amp;hellip;と思ったらnoticeの引数に変数をセットしても式展開されずに難儀しました。&lt;br&gt;
可読性も大切ですが、あくまでテストデータなので、ここで時間をかけるより他に時間をかけた方が良いことがある！と言い聞かせて、結局変数は使いませんでした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>モンキーパッチ</title>
      <link>http://blog.tackeyy.org/post/2016-06-14/monkey-patch/</link>
      <pubDate>Tue, 14 Jun 2016 20:28:37 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016-06-14/monkey-patch/</guid>
      <description>

&lt;p&gt;社内の方が&lt;a href=&#34;https://github.com/t-k/gmo-payment-ruby&#34;&gt;gmo-payment-ruby&lt;/a&gt;にあてたモンキーパッチを紹介されていました。&lt;br&gt;
前職ではJavaを主に使っていて、外部のライブラリを使用するというよりも自社で自社仕様のライブラリを使う（もしくは作る）方が多かったので、&lt;br&gt;
今回初めてモンキーパッチという言葉を聞きました。&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;モンキーパッチ:1520bcef3e0cf7194b7be104b759d6c9&#34;&gt;モンキーパッチ&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;モンキーパッチは、オリジナルのソースコードを変更することなく、実行時に動的言語(例えばSmalltalk, JavaScript, Objective-C, Ruby, Perl, Python, Groovy, など)のコードを拡張したり、変更したりする方法である。
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%B3%E3%82%AD%E3%83%BC%E3%83%91%E3%83%83%E3%83%81&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;方法:1520bcef3e0cf7194b7be104b759d6c9&#34;&gt;方法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;紹介されたモンキーパッチでは、class_eval, module_eval (Module)を使用して実装していました&lt;br&gt;
&lt;a href=&#34;http://ref.xaio.jp/ruby/classes/module/class_eval&#34;&gt;http://ref.xaio.jp/ruby/classes/module/class_eval&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;話を受けて思ったこと:1520bcef3e0cf7194b7be104b759d6c9&#34;&gt;話を受けて思ったこと&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;モンキーパッチが呼び出されていることをコード見ただけでわかるか？&lt;br&gt;
運用・保守を行うフェーズを想定すると上記の観点を満たせるか、という点が大事になる気がしました。&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>carrierwaveを使ってlocalに画像をuploadする</title>
      <link>http://blog.tackeyy.org/post/2016-05-20/upload-file-to-local-with-carrierwave/</link>
      <pubDate>Fri, 20 May 2016 14:29:04 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016-05-20/upload-file-to-local-with-carrierwave/</guid>
      <description>

&lt;p&gt;備忘のために&lt;a href=&#34;https://github.com/carrierwaveuploader/carrierwave&#34;&gt;carrierwave&lt;/a&gt;を使って、ローカルに画像をアップロードする手順を記しておきます。&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rails 4.2&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;手順:d543c7f79abfce00739442eae017e4c1&#34;&gt;手順&lt;/h3&gt;

&lt;p&gt;GemのREADMEに記載があるのでインストールは飛ばします。&lt;br&gt;
詳しい手順はREADMEや&lt;a href=&#34;http://morizyun.github.io/blog/carrierwave-image-uploader-rails/&#34;&gt;ここ&lt;/a&gt;などにもあります。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-コントローラーを作る:d543c7f79abfce00739442eae017e4c1&#34;&gt;1.コントローラーを作る&lt;/h3&gt;

&lt;p&gt;ポリモーフィック関連で実装しているので、imageという名前でuploaderを作成します。
&lt;br&gt;
&lt;code&gt;rails generate uploader image&lt;/code&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;最小限の機能で良いので、上記のコマンドで作成されたimage_uploader.rbを&lt;a href=&#34;https://gyazo.com/f490ad33743aabb0123119a873feb330&#34;&gt;こんな感じ&lt;/a&gt;にします。&lt;br&gt;
image_uploader.rbのパスは画像の左下に出てます。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-モデルを修正する:d543c7f79abfce00739442eae017e4c1&#34;&gt;2.モデルを修正する&lt;/h3&gt;

&lt;p&gt;以下の★ の箇所を追記します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Image &amp;lt; ActiveRecord::Base
  acts_as_paranoid

  ★ mount_uploader :image, ImageUploader
  belongs_to :imageable, polymorphic: true
  ★ belongs_to :user, polymorphic: true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なぜかmodels/userにuploaderをmountしていたので、Images.imageに#ActionDispatch::Http::UploadedFileほにゃららという文字列が入ってうまく画像をupdateできずに相当はまりました&amp;hellip;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-ビューを修正する:d543c7f79abfce00739442eae017e4c1&#34;&gt;3. ビューを修正する&lt;/h3&gt;

&lt;p&gt;views/users/_form.html.erb&lt;br&gt;&lt;/p&gt;

&lt;p&gt;user has one image なので、user.image.image_urlで画像のURLを取得します。&lt;br&gt;
has_manyの場合は、user.images.first.image_urlとかeachでimagesを回してimage_urlとかでURLが取得できます。&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;% if user.image.image_url.nil? %&amp;gt;
  &amp;lt;%= image_tag &#39;no_image.jpg&#39;, size: &#39;270x300&#39; %&amp;gt;
  &amp;lt;%= f.file_field :image %&amp;gt;
  &amp;lt;% else %&amp;gt;
  &amp;lt;%= image_tag user.image.image_url %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;画像を削除する:d543c7f79abfce00739442eae017e4c1&#34;&gt;画像を削除する&lt;/h4&gt;

&lt;p&gt;READMEに記載がある通り、remove_imageを使います。&lt;br&gt;
viewを以下の通りにするだけで保存時に画像が削除されます。&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;label&amp;gt;
  &amp;lt;%= check_box :remove_image, user.image.remove_image %&amp;gt;
  画像を削除する
&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;todo:d543c7f79abfce00739442eae017e4c1&#34;&gt;TODO&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;画像アップロード時にプレビューを表示する&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;以下を試してみる
&lt;a href=&#34;http://morizyun.github.io/blog/carrierwave-image-uploader-rails/&#34;&gt;http://morizyun.github.io/blog/carrierwave-image-uploader-rails/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像削除のチェックボックスにレが入った時に画像を見えなくする&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;ほいじゃあの&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RuboCopでコードの静的チェックをしてみた@ローカル</title>
      <link>http://blog.tackeyy.org/post/2016-05-19/rubocop/</link>
      <pubDate>Thu, 19 May 2016 07:47:12 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016-05-19/rubocop/</guid>
      <description>

&lt;p&gt;参加しているプロジェクトでSideCIを用いてGitHub上にPushした時にRuboCopを走らせています。&lt;br&gt;
&lt;a href=&#34;http://blog.tackeyy.org/post/2016-05-14/mailto-slack-from-sideci/&#34;&gt;SideCI（RuboCopの解析）の結果をSlack通知に通知する&lt;/a&gt;&lt;br&gt;
上記の記事の通りRuboCopのチェック結果（ソースへのコメント）がSlackに流れてくるので、だんだんうざくなってきました。&lt;br&gt;
たぶん自分でpushした結果が流れてくるならいいのですが、他の人からしたらうざったいだろうなと思い、ローカルでRuboCopを走らせるようにしました。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;rubocopをインストール:c70d9faebd769dcef536a9856ec7f8be&#34;&gt;RuboCopをインストール&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bbatsov/rubocop#installation&#34;&gt;RuboCop&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
&lt;code&gt;gem install rubocop&lt;/code&gt; これだけ。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;rubocopの結果が見にくい:c70d9faebd769dcef536a9856ec7f8be&#34;&gt;RuboCopの結果が見にくい&lt;/h3&gt;

&lt;p&gt;エディタはVimを使っているので、プラグインを探すと&lt;a href=&#34;https://github.com/ngmy/vim-rubocop&#34;&gt;こんなの&lt;/a&gt;があった。&lt;br&gt;
プラグインはNeoBundleで管理しているので、以下の行を~/.vimrcに足して完了。&lt;br&gt;
1. &lt;code&gt;NeoBundle &#39;ngmy/vim-rubocop&#39; &amp;quot;rubocop&lt;/code&gt;&lt;br&gt;
1. &lt;code&gt;NeoBundleInstall&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
あとは、&lt;code&gt;:RuboCop&lt;/code&gt;するだけ。&lt;br&gt;
quickfix windowが開くので、普通にRuboCop走らせて修正するより楽になりました。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
ほいじゃあの。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sorceryのREADMEを読んでみた</title>
      <link>http://blog.tackeyy.org/post/2016-05-15/sorcery/</link>
      <pubDate>Sun, 15 May 2016 18:11:00 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016-05-15/sorcery/</guid>
      <description>

&lt;p&gt;sorceryは僕が携わっているプロジェクトで使用されていたりする身近な存在ではあったのですが、&lt;br&gt;
プロジェクト開始時にPMの方が最初にひな形を作ってくださるので（認証周りも含めて）、sorceryは直接的に触ったことはありませんでした。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;有名なGemなので色々なブログで導入手順などはまとまってたりするのですが、そもそもsorceryって？というところを把握したくて&lt;a href=&#34;https://github.com/NoamB/sorcery&#34;&gt;README&lt;/a&gt;を読んでみることにしました。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;sorcery:3c4eb0da7fb97422d24a60b33c2c0df9&#34;&gt;sorcery&lt;/h3&gt;

&lt;p&gt;rails3,4 の魔法の認証機能を提供するgem。&lt;/p&gt;

&lt;h3 id=&#34;philosophy:3c4eb0da7fb97422d24a60b33c2c0df9&#34;&gt;philosophy&lt;/h3&gt;

&lt;p&gt;自分自身の認証フローにおける重要で最小限の認証の機構。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;以下の単語は知らなかった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stripped-down&lt;br&gt;&lt;/li&gt;
&lt;li&gt;bare-bones&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
ちゃんちゃん&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>